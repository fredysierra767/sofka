La automatizaci√≥n del flujo completo sobre la API p√∫blica de PetStore Swagger permite validar de forma confiable y repetible las operaciones esenciales sobre el recurso Pet, que representa el n√∫cleo funcional del sistema.

Mediante la implementaci√≥n de una prueba de servicios REST con Karate DSL, se logr√≥:

‚úÖ Simular un flujo completo de ciclo de vida de una mascota, que incluye:

Creaci√≥n din√°mica de la mascota con datos le√≠dos desde archivos JSON externos.

Consulta de la mascota reci√©n creada por su ID √∫nico.

Actualizaci√≥n de sus datos (como nombre y estado), validando los cambios correctamente.

Verificaci√≥n final buscando por estado (sold) y confirmando la existencia de la mascota modificada.

‚úÖ Aplicar buenas pr√°cticas de automatizaci√≥n, como:

Separaci√≥n clara entre l√≥gica de prueba y datos (archivos *.json en carpeta resources).

Uso de un feature orquestador que garantiza la ejecuci√≥n ordenada y dependiente de cada paso del flujo.

Persistencia y reutilizaci√≥n de variables clave entre escenarios (petId) sin acoplar pruebas.

‚úÖ Generaci√≥n de reportes HTML mediante integraci√≥n con JUnit y ReportBuilder, facilitando la visibilidad de los resultados y su trazabilidad.

‚ö†Ô∏è Limitaciones encontradas:

El servicio PetStore es p√∫blico y ocasionalmente presenta ca√≠das temporales o respuestas 500, lo que afecta la estabilidad de la ejecuci√≥n continua del flujo completo.

El endpoint de creaci√≥n no genera autom√°ticamente un ID nuevo al recibir "id": 0; se opt√≥ por fijar el valor o generar uno aleatorio en el c√≥digo seg√∫n la necesidad.

üîÅ Esta automatizaci√≥n sirve como base para construir pruebas m√°s complejas que incluyan:

Validaciones negativas o con datos err√≥neos.

Pruebas de carga o concurrencia sobre los endpoints.

Flujo completo con m√∫ltiples mascotas u operaciones paralelas.

Adem√°s, su integraci√≥n en pipelines de CI/CD permitir√≠a validar regresiones de forma autom√°tica ante cada cambio o despliegue en entornos de prueba.